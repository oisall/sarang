{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { REMOVE_POST_SUCCESS, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\nimport shortid from \"shortid\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction loadPostAPI(data) {\n  return axios.get('/api/post', data);\n}\nfunction* loadPost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    console.log(action.data + 'data 뭐야 씨발');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    const id = shortid.generate();\n    console.log(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        content: action.data,\n        id\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI,action.data)\n    yield delay(1000);\n    console.log('코멘트 사가');\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","delay","put","fork","takeLatest","REMOVE_POST_SUCCESS","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","shortid","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","console","log","type","generateDummyPost","err","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","error","REMOVE_POST_FAILURE","addCommentAPI","postId","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Dev/next_react_node/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\r\nimport { REMOVE_POST_SUCCESS,ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\r\nimport shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/post', data)\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n\r\n        console.log(action.data+'data 뭐야 씨발')\r\n\r\n        yield put({\r\n\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n\r\n        });\r\n\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        console.log(action.data)\r\n        yield put({\r\n\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                content: action.data,\r\n                id\r\n\r\n            }\r\n\r\n        });\r\n\r\n        yield put({\r\n            type: ADD_POST_TO_ME, data:id\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME, \r\n            data:action.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err)\r\n        yield put({\r\n\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n\r\n        // const result = yield call(addCommentAPI,action.data)\r\n        yield delay(1000);\r\n        console.log('코멘트 사가')\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}