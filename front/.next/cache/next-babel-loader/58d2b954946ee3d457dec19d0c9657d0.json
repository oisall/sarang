{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { ADD_POST_TO_ME, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI,action.data)\n    yield delay(1000);\n    console.log('코멘트 사가');\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","delay","put","fork","takeLatest","ADD_POST_TO_ME","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","shortid","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","addCommentAPI","postId","addComment","console","log","watchAddPost","watchAddComment","postSaga"],"sources":["C:/Dev/next_react_node/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all,delay,put,fork, takeLatest } from \"redux-saga/effects\";\r\nimport { ADD_POST_TO_ME,ADD_POST_SUCCESS,ADD_POST_FAILURE,ADD_POST_REQUEST,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_FAILURE } from \"../reducers/post\";\r\nimport shortid from \"shortid\";\r\n\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post',data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        const id= shortid.generate();\r\n        yield put({\r\n\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content:action.data\r\n            }\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`,data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n\r\n        // const result = yield call(addCommentAPI,action.data)\r\n        yield delay(1000);\r\n        console.log('코멘트 사가')\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchAddPost() {\r\n        yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAACC,KAAK,EAACC,GAAG,EAACC,IAAI,EAAEC,UAAU,QAAQ,oBAAoB;AACnE,SAASC,cAAc,EAACC,gBAAgB,EAACC,gBAAgB,EAACC,gBAAgB,EAACC,mBAAmB,EAACC,mBAAmB,EAACC,mBAAmB,QAAQ,kBAAkB;AAChK,OAAOC,OAAO,MAAM,SAAS;AAI7B,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOf,KAAK,CAACgB,IAAI,CAAC,WAAW,EAACD,IAAI,CAAC;AACvC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IAEA;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMiB,EAAE,GAAEN,OAAO,CAACO,QAAQ,EAAE;IAC5B,MAAMjB,GAAG,CAAC;MAENkB,IAAI,EAAEd,gBAAgB;MACtBQ,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAACJ,MAAM,CAACH;MACnB;IACJ,CAAC,CAAC;IACF,MAAMZ,GAAG,CAAC;MACNkB,IAAI,EAACf;IACT,CAAC,CAAC;EACN,CAAC,CAAC,OAAOiB,GAAG,EAAE;IAEV,MAAMpB,GAAG,CAAC;MAENkB,IAAI,EAAEb,gBAAgB;MACtBO,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASU,aAAa,CAACV,IAAI,EAAE;EACzB,OAAOf,KAAK,CAACgB,IAAI,CAAE,aAAYD,IAAI,CAACW,MAAO,UAAS,EAACX,IAAI,CAAC;AAC9D;AAEA,UAAUY,UAAU,CAACT,MAAM,EAAE;EACzB,IAAI;IAEA;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB0B,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,MAAM1B,GAAG,CAAC;MAENkB,IAAI,EAAEV,mBAAmB;MACzBI,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IAEV,MAAMpB,GAAG,CAAC;MAENkB,IAAI,EAAET,mBAAmB;MACzBG,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AAEJ;AAEA,UAAUe,YAAY,GAAG;EACjB,MAAMzB,UAAU,CAACI,gBAAgB,EAACQ,OAAO,CAAC;AAClD;AAEA,UAAUc,eAAe,GAAG;EACxB,MAAM1B,UAAU,CAACK,mBAAmB,EAACiB,UAAU,CAAC;AACpD;AAGA,eAAe,UAAUK,QAAQ,GAAE;EAC/B,MAAM/B,GAAG,CAAC,CACNG,IAAI,CAAC0B,YAAY,CAAC,EAClB1B,IAAI,CAAC2B,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}