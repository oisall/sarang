{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, put, fork, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { generateDummyPost, REMOVE_POST_SUCCESS, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, REMOVE_POST_OF_ME, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    console.log(action.data + 'data 뭐야 씨발');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction loadPostAPI(data) {\n  return axios.get('/post', data);\n}\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    console.log(action.data + 'data 뭐야 씨발');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log('코멘트 사가');\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","delay","put","fork","takeLatest","throttle","call","generateDummyPost","REMOVE_POST_SUCCESS","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","REMOVE_POST_OF_ME","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","loadPostsAPI","data","get","loadPosts","action","result","console","log","type","err","response","loadPostAPI","loadPost","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","error","REMOVE_POST_FAILURE","addCommentAPI","postId","addComment","watchAddPost","watchLoadPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Dev/next_react_node/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, put, fork, takeLatest, throttle,call } from \"redux-saga/effects\";\r\nimport { generateDummyPost,REMOVE_POST_SUCCESS,ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, REMOVE_POST_OF_ME, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\r\n\r\n\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts', data)\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n\r\n        const result = yield call(loadPostsAPI,action.data)\r\n   \r\n\r\n        console.log(action.data+'data 뭐야 씨발')\r\n\r\n        yield put({\r\n\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n\r\n        });\r\n\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/post', data)\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n\r\n        const result = yield call(loadPostAPI,action.data)\r\n   \r\n\r\n        console.log(action.data+'data 뭐야 씨발')\r\n\r\n        yield put({\r\n\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n\r\n        });\r\n\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', {content: data})\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n\r\n        const result = yield call(addPostAPI,action.data)\r\n        \r\n        console.log(action.data)\r\n        yield put({\r\n\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n\r\n        });\r\n\r\n        yield put({\r\n            type: ADD_POST_TO_ME, \r\n            data:result.data.id\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME, \r\n            data:action.data\r\n        })\r\n    } catch (err) {\r\n        console.error(err)\r\n        yield put({\r\n\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n\r\n        const result = yield call(addCommentAPI,action.data)\r\n  \r\n        console.log('코멘트 사가')\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchLoadPost() {\r\n    yield throttle(5000,LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000,LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,QAAQ,EAACC,IAAI,QAAQ,oBAAoB;AACrF,SAASC,iBAAiB,EAACC,mBAAmB,EAACC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC7Q,SAASC,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,kBAAkB;AAI1K,SAASC,YAAY,CAACC,IAAI,EAAE;EACxB,OAAO7B,KAAK,CAAC8B,GAAG,CAAC,QAAQ,EAAED,IAAI,CAAC;AACpC;AAEA,UAAUE,SAAS,CAACC,MAAM,EAAE;EACxB,IAAI;IAEA,MAAMC,MAAM,GAAG,MAAM1B,IAAI,CAACqB,YAAY,EAACI,MAAM,CAACH,IAAI,CAAC;IAGnDK,OAAO,CAACC,GAAG,CAACH,MAAM,CAACH,IAAI,GAAC,YAAY,CAAC;IAErC,MAAM1B,GAAG,CAAC;MAENiC,IAAI,EAAElB,kBAAkB;MACxBW,IAAI,EAAEI,MAAM,CAACJ;IAEjB,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IAEV,MAAMlC,GAAG,CAAC;MAENiC,IAAI,EAAEjB,kBAAkB;MACxBU,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAGA,SAASU,WAAW,CAACV,IAAI,EAAE;EACvB,OAAO7B,KAAK,CAAC8B,GAAG,CAAC,OAAO,EAAED,IAAI,CAAC;AACnC;AAEA,UAAUW,QAAQ,CAACR,MAAM,EAAE;EACvB,IAAI;IAEA,MAAMC,MAAM,GAAG,MAAM1B,IAAI,CAACgC,WAAW,EAACP,MAAM,CAACH,IAAI,CAAC;IAGlDK,OAAO,CAACC,GAAG,CAACH,MAAM,CAACH,IAAI,GAAC,YAAY,CAAC;IAErC,MAAM1B,GAAG,CAAC;MAENiC,IAAI,EAAElB,kBAAkB;MACxBW,IAAI,EAAEI,MAAM,CAACJ;IAEjB,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IAEV,MAAMlC,GAAG,CAAC;MAENiC,IAAI,EAAEjB,kBAAkB;MACxBU,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAKA,SAASY,UAAU,CAACZ,IAAI,EAAE;EACtB,OAAO7B,KAAK,CAAC0C,IAAI,CAAC,OAAO,EAAE;IAACC,OAAO,EAAEd;EAAI,CAAC,CAAC;AAC/C;AAEA,UAAUe,OAAO,CAACZ,MAAM,EAAE;EACtB,IAAI;IAEA,MAAMC,MAAM,GAAG,MAAM1B,IAAI,CAACkC,UAAU,EAACT,MAAM,CAACH,IAAI,CAAC;IAEjDK,OAAO,CAACC,GAAG,CAACH,MAAM,CAACH,IAAI,CAAC;IACxB,MAAM1B,GAAG,CAAC;MAENiC,IAAI,EAAE1B,gBAAgB;MACtBmB,IAAI,EAAEI,MAAM,CAACJ;IAEjB,CAAC,CAAC;IAEF,MAAM1B,GAAG,CAAC;MACNiC,IAAI,EAAEhB,cAAc;MACpBS,IAAI,EAACI,MAAM,CAACJ,IAAI,CAACgB;IACrB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOR,GAAG,EAAE;IAEV,MAAMlC,GAAG,CAAC;MAENiC,IAAI,EAAEzB,gBAAgB;MACtBkB,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAIA,SAASiB,aAAa,CAACjB,IAAI,EAAE;EACzB,OAAO7B,KAAK,CAAC+C,MAAM,CAAC,WAAW,EAAElB,IAAI,CAAC;AAC1C;AAEA,UAAUmB,UAAU,CAAChB,MAAM,EAAE;EACzB,IAAI;IAEA;IACA,MAAM9B,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MAENiC,IAAI,EAAE3B,mBAAmB;MACzBoB,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;IAEF,MAAM1B,GAAG,CAAC;MACNiC,IAAI,EAAEZ,iBAAiB;MACvBK,IAAI,EAACG,MAAM,CAACH;IAChB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACVH,OAAO,CAACe,KAAK,CAACZ,GAAG,CAAC;IAClB,MAAMlC,GAAG,CAAC;MAENiC,IAAI,EAAEc,mBAAmB;MACzBrB,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAIA,SAASsB,aAAa,CAACtB,IAAI,EAAE;EACzB,OAAO7B,KAAK,CAAC0C,IAAI,CAAE,aAAYb,IAAI,CAACuB,MAAO,UAAS,EAAEvB,IAAI,CAAC;AAC/D;AAEA,UAAUwB,UAAU,CAACrB,MAAM,EAAE;EACzB,IAAI;IAEA,MAAMC,MAAM,GAAG,MAAM1B,IAAI,CAAC4C,aAAa,EAACnB,MAAM,CAACH,IAAI,CAAC;IAEpDK,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,MAAMhC,GAAG,CAAC;MAENiC,IAAI,EAAEtB,mBAAmB;MACzBe,IAAI,EAAEI,MAAM,CAACJ;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IAEV,MAAMlC,GAAG,CAAC;MAENiC,IAAI,EAAErB,mBAAmB;MACzBc,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AAEJ;AAGA,UAAUyB,YAAY,GAAG;EACrB,MAAMjD,UAAU,CAACO,gBAAgB,EAAEgC,OAAO,CAAC;AAC/C;AACA,UAAUW,aAAa,GAAG;EACtB,MAAMjD,QAAQ,CAAC,IAAI,EAACW,kBAAkB,EAAEuB,QAAQ,CAAC;AACrD;AACA,UAAUgB,cAAc,GAAG;EACvB,MAAMlD,QAAQ,CAAC,IAAI,EAACW,kBAAkB,EAAEc,SAAS,CAAC;AACtD;AACA,UAAU0B,eAAe,GAAG;EACxB,MAAMpD,UAAU,CAACW,mBAAmB,EAAEgC,UAAU,CAAC;AACrD;AAEA,UAAUU,eAAe,GAAG;EACxB,MAAMrD,UAAU,CAACQ,mBAAmB,EAAEwC,UAAU,CAAC;AACrD;AAGA,eAAe,UAAUM,QAAQ,GAAG;EAChC,MAAM1D,GAAG,CAAC,CACNG,IAAI,CAACkD,YAAY,CAAC,EAElBlD,IAAI,CAACmD,aAAa,CAAC,EACnBnD,IAAI,CAACoD,cAAc,CAAC,EACpBpD,IAAI,CAACqD,eAAe,CAAC,EACrBrD,IAAI,CAACsD,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}