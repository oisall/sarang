{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from 'redux-saga';\nimport axios from \"axios\";\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          var _mainPosts;\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, null, me && __jsx(PostForm, null), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post\n  })));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req,\n  res\n}) => {\n  console.log('컨텍스트');\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}