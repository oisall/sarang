{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport shortid from \"shortid\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        content: action.data,\n        id\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI,action.data)\n    yield delay(1000);\n    console.log('코멘트 사가');\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","delay","put","fork","takeLatest","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","shortid","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addCommentAPI","postId","addComment","console","log","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Dev/next_react_node/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, put, fork, takeLatest } from \"redux-saga/effects\";\r\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST } from \"../reducers/post\";\r\nimport shortid from \"shortid\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                content: action.data,\r\n                id\r\n\r\n            }\r\n\r\n        });\r\n\r\n        yield put({\r\n            type: ADD_POST_TO_ME, id\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        // const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME, \r\n            data:action.data\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n\r\n        // const result = yield call(addCommentAPI,action.data)\r\n        yield delay(1000);\r\n        console.log('코멘트 사가')\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n\r\n        yield put({\r\n\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}