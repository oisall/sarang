{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useState","text","setText","dispatch","useDispatch","useSelector","state","post","imagePaths","addPostDone","imageInput","useRef","useEffect","onChangeText","useCallback","e","target","value","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","onClickImageUpload","current","click","onChangeImages","console","log","files","imageFormData","call","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","style","margin","encType","onFinish","TextArea","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","float","htmlType","map","v","i","key","display","src","width","alt","Home","me","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-5573f95a9de8db0b7223.js","sourcesContent":["import { Form, Input, Button } from 'antd';\r\nimport  React,{ useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addPost,UPLOAD_IMAGES_REQUEST,REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n    const [text,setText] = useState('');\r\n    const dispatch = useDispatch();\r\n    const { imagePaths,addPostDone } = useSelector((state) => state.post);\r\n    const imageInput = useRef();\r\n    useEffect(()=>{\r\n\r\n        if(addPostDone){\r\n            setText('');\r\n        }\r\n    },[addPostDone])\r\n\r\n\r\n\r\n    const onChangeText =useCallback((e)=>{\r\n        setText(e.target.value);\r\n    })\r\n\r\n\r\n    const onSubmit = useCallback(() => {\r\n        if(!text || !text.trim()){\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p)=>{\r\n            formData.append('image',p);\r\n\r\n        });\r\n        formData.append('content',text);\r\n\r\n      return  dispatch({\r\n            type:ADD_POST_REQUEST,\r\n            data:formData\r\n        })\r\n       \r\n    }, [text,imagePaths]);\r\n\r\n    const onClickImageUpload=useCallback(()=>{\r\nimageInput.current.click();\r\n    },[imageInput.current])\r\n\r\nconst onChangeImages = useCallback((e)=>{\r\n    console.log('images',e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files,(f)=>{\r\n        imageFormData.append('image',f);\r\n    });\r\n    dispatch({\r\n        type:UPLOAD_IMAGES_REQUEST,\r\n        data:imageFormData\r\n    })\r\n})\r\n\r\nconst onRemoveImage=useCallback((index)=>()=>{\r\n    dispatch({\r\n        type: REMOVE_IMAGE,\r\n        data:index\r\n    })\r\n})\r\n    return (\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder='어떤 신기한 일이 있었나요?'\r\n            />\r\n            <div>\r\n                <input type='file' name='image' multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type='primary' style={{ float: 'right' }} htmlType='submit'>짹짹</Button>\r\n\r\n            </div>\r\n            <div>\r\n                {imagePaths.map((v,i) => (\r\n                    <div key={v} style={{ display: 'inline-block' }}>\r\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                        <div>\r\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    );\r\n\r\n}\r\n\r\nexport default PostForm;","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport {LOAD_MY_INFO_REQUEST} from \"../reducers/user\"\r\nimport wrapper from \"../store/configureStore\";\r\nimport {END} from 'redux-saga'\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, hasMorePost,loadPostsLoading,retweetError } = useSelector((state) => state.post);\r\n    \r\n    \r\n    useEffect(()=>{\r\n        if(retweetError){\r\n            alert(retweetError)\r\n        }\r\n    },[retweetError])\r\n    \r\n    useEffect(() => {\r\n        function onScroll() {\r\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight-300) {\r\n            \r\n                if (hasMorePost && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length-1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        \r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll)\r\n        }\r\n    }, [hasMorePost,loadPostsLoading,mainPosts])\r\n    \r\n    \r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((store)=>async({req,res})=>{\r\n    \r\n    console.log('컨텍스트')\r\n    const cookie = req ? req.headers.cookie :'';\r\n    axios.defaults.headers.Cookie='';\r\n    if(req && cookie){\r\n\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    \r\n    store.dispatch({\r\n        type:LOAD_MY_INFO_REQUEST,\r\n    })\r\n    \r\n    store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n\r\n    store.dispatch(END);\r\n    \r\n    await store.sagaTask.toPromise();\r\n\r\n})\r\n\r\nexport default Home;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}